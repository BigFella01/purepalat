------------ APPLICATION LAYER ------------

WHAT IS HTTP?

The Hypertext Transfer Protocol (HTTP) is the foundation of the World Wide Web, and is used to load webpages using hypertext links.
HTTP is an application layer protocol designed to transfer information between networked devices and runs on top of other layers of the network protocol stack. A typical flow over HTTP involves a client machine making a request to a server, which then sends a response message.  

WHAT IS IN AN HTTP REQUEST?

An HTTP request is the way Internet communications platforms such as web browsers ask for the information they need to load a website. Each HTTP request made across the Internet carries with it a series of encoded data that carries different types of information. A typical HTTP request contains: 

1. HTTP version type
2. a URL
3. an HTTP method
4. HTTP request headers
5. Optional HTTP body

Let's explore in greater depth how these requests work, and how the contents of a request can be used to share information. 

WHAT IS AN HTTP METHOD?

An HTTP method, sometimes referred to as an HTTP verb, indicates the action that the HTTP request expects from the queried server. For example, two of the most common HTTP methods are 'GET' and 'POST'; a 'GET' request expects information back in return (usually in the form of a website), while a 'POST' request typically indicates that the client is submitting information to the web server (such as form information, e.g. a submitted username and password). 

WHAT ARE HTTP REQUEST HEADERS?

HTTP headers contain text information stored in key-value pairs, and they are included in every HTTP request (and response, more on that later). These headers communicate core information, such as what browser the client is using and what data is being requested. 

WHAT IS IN AN HTTP REQUEST BODY?

The body of a request is the part that contains the 'body' of information the request is transferring. The body of an HTTP request contains any information being submitted to the web server, such as a username and password, or any other data entered into a form. 

WHAT IS IN AN HTTP RESPONSE?

An HTTP response is what web clients (often browsers) receive from an Internet server in answer to an HTTP request. These responses communicate valuable information based on what was asked for in the HTTP request. 

A typical HTTP response contains:

1. an HTTP status code
2. HTTP response headers
3. optional HTTP body

Let's break these down:

WHAT'S AN HTTP STATUS CODE?

HTTP status codes are 3-digit codes most often used to indicate whether an HTTP request has been successfully completed. Status codes are broken into the following 5 blocks:

1. 1xx Informational
2. 2xx Success
3. 3xx Redirection
4. 4xx Client Error
5. 5xx Server Error

Status codes starting with the number '2' indicate a success. For example, after a client requests a webpage, the most commonly seen responses have a status code of '200 OK', indicating that the request was properly completed. 

If the response starts with a '4' or a '5', that means there was an error and the webpage will not be displayed. A status code that begins with a '4' indicates a client-side error (it is very common to encounter a '404 NOT FOUND' status code when making a typo in the URL). A status code beginning in '5' means something went wrong on the server side. Status codes can also begin with a '1' or a '3', which indicate an informational response and a redirect, respectively. 

WHAT ARE HTTP RESPONSE HEADERS?

Much like an HTTP request, an HTTP response comes with headers that convey important information such as the language and format of the data being sent in the response body. 

WHAT IS IN AN HTTP RESPONSE BODY?

Successful HTTP responses to 'GET' requests generally have a body which contains the requested information. In most web requests, this is HTML data that a web browser will translate into a webpage. 

CAN DDoS ATTACKS BE LAUNCHED OVER HTTP?

Keep in mind that HTTP is a 'stateless' protocol, which means that each command runs independent of any other command, In the original spec, HTTP requests each created and closed a TCP connection. In newer versions of the HTTP protocol (HTTP 1.1 and above), persistent connection allows for multiple HTTP requests to pass over a persistent TCP connection, improving resource consumption. In the context of DoS or DDoS attacks, HTTP requests in large quantities can be used to mount an attack on a target device, and are considered part of application layer attacks or layer 7 attacks. 



THREE IMPORTANT THINGS ABOUT THE HTTP

1. HTTP is connectionless: after making the request, the client disconnects from the server, then when the response is ready, the server re-establishes the connection again and delivers the response

2. The HTTP can deliver any sort of data, as long as the two computers are able to read it

3. HTTP is a stateless protocol: The client and server know about each other just during the current request. If it closes, and the two computers want to connect again, they need to provide information to each other anew, and the connection is handled as the very first one. 



------------ eTAGS ------------

E-tags are a really useful part of HTTP that can make sites run faster through more efficient caching of resources. ETags help by differentiating between multiple representations of the same resource;however, they are often misused or implemented incorrectly, which means the potential performance benefits they could be delivering gets lost. Optimizing your ETag implementation is a way to speed up your site and reduce calls to your origin without requiring a huge code refactoring or content overhaul. 

WHAT IS AN eTAG?

ETag is an HTTP response header field that helps with caching behavior by making it easy to check whether a resource has changed, without having to re-download it - a process known as "revalidation". It provides the entity tag of a resource - a representation of the resource but in a much shorter form. It's normally the result of a hashing function such as MD5 or SHA-1. 

The best type of caching is when no request happens, such as when a response can be explicitly cached in the browser using the Cache-Control header field.

The second best type of caching is when a request happens, but no response body is necessary as the target resource has not changed since the browser last fetched it. This is where an ETag can help. 

The actual value of an entity tag isn't defined by the specification, and is left up to the server. From Fastly's perspective, it's an opaque value that we store but we don't try to parse or interpret in any way. The origin server determining if what we say we have has changed - and, if not, the origin responds to tell us we can keep using it. 

ETags aren't always the best way to revalidate resources. If you know when the resource was last modified and one-second resolution is sufficient, you should use the Last-Modified response header field instead. This means that the browser can ask "send me the content, but only if it has changed since this date, when I last fetched it." Keeping track of the last modified date might be easier than generating an entity tag. 

A PRACTICAL EXAMPLE

We could read the specification, but that sounds tedious. Instead, let's run through a practical example. I'm going to omit a number of header fields for clarity. 

Here's an example request from a browser that fetches the Fastly homepage:

> GET / HTTP/2
> Host: www.fastly.com

And here's the response from the Fastly server, which also includes the body:

< HTTP/2 200
< Cache-Control: max-age=0, must-revalidate
< Content-Length: 524653
< ETag: "ebeb4dbc1362d124452335a71286c21d"

The response signifies that the browser must revalidate the page before using it again. To revalidate, a request is made with an If-None-Match request header field using the ETag value form the previous response.  If-None-Match isn't really great English (it's more like Only-Send-The-Body-If-The-ETag-Is-Different-From-This-One), but maybe that's a bit verbose. So the next time the user wants the Fastly homepage, their browswer will send a slightly different request:

> GET / HTTP/2
> Host: www.fastly.com
> If-None-Match: "ebeb4dbc1362d124452335a71286c21d"

If the Fastly server decides that the homepage still has the same ETag as the one cited in the If-None-Match tag, it sends a 304 Not modified response, with no body and the browser uses the body in its cache that had fetched originally:

< HTTP/2 304

The benefit is that the second time around, the body does not have to be send across the network. Fewer bytes transferred leads to improved web performance. 

